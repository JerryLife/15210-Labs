functor MkTableKGramStats(structure Util : SEQUENCE_UTIL
                          structure T : TABLE
                            where type Key.t = string Util.Seq.seq
                          sharing T.Seq = Util.Seq) : KGRAM_STATS =
struct
  structure Table = T
  structure Seq = T.Seq
  open Util
  open Seq

  type token = string
  type kgram = token seq
			

  (* Remove this line when you're done. *)
  exception NotYetImplemented

  (* You must define the abstract kgramstats type *)
  type kgramstats =(int*((string hist) T.table))

  fun makeStats (corpus : string) (maxK : int) : kgramstats =
    let
	val myTokens = append ((tokens (not o Char.isAlphaNum) corpus),singleton(""))
	fun genkgrams k =
	  if(k=0) then singleton((empty(),""))
	  else
	      let
	      fun genMaxGrams begin = if(begin + k > (length myTokens-1)) then (empty(),"") else (subseq myTokens (begin,k),nth myTokens k)
	      val MaxGrams = tabulate genMaxGrams ((length myTokens)-k)		      
	  in
	      append(genkgrams (k-1),MaxGrams)
	  end
	val allkgrams = genkgrams maxK
	val tableRaw = collect (collate String.compare) allkgrams
	fun first (i,_) = i
	fun second (_,i) = i
	fun filterer "" = false
	  | filterer _ = true
	val rawGrams = map first tableRaw
	val rawHist = map (histogram String.compare) (map (filter filterer) (map second tableRaw))
    in
	(maxK,Table.fromSeq(zip rawGrams rawHist))
    end
	
				  

  fun lookupExts (stats : kgramstats) (kgram : kgram) : (token * int) seq =
      raise NotYetImplemented

  fun maxK (stats : kgramstats) : int =
      raise NotYetImplemented

end
