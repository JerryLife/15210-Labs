functor MkDivideAndConquerPD(structure P : PAREN_PACKAGE) : PAREN_DIST =
struct
  structure P = P
  open Primitives
  open P
  open Seq


  fun parenDist (parens : paren seq) : int option =
  let
  fun allInfo substr =
  case showt substr
  of EMPTY =>(0,0,0,0,0)
   | ELT OPAREN =>(0,1,0,1,0)
   | ELT RPAREN => (0,0,1,0,1)
   |NODE(l,r) =>
   let 
     val ((lin,llmo,lrmc,lounm,lcunm),(rin,rlmo,rrmc,rounm,rcunm)) = 
      par(fn()=>allInfo l, fn()=>allInfo r)
      fun max (a,b) = if (a>b) then a else b;
     val aounm = if(lounm > rcunm) then (lounm-rcunm) else 0;
     val acunm = if(rcunm > lounm) then (rcunm-lounm) else 0;
     val ounm = rounm +aounm
     val cunm = lcunm +acunm
     val lmo = if(lounm > rcunm) then (llmo + length r) else rlmo;
     val rmc = if(rcunm > lounm) then (rrmc + length l) else lrmc;
     val nin = max(max(lin,rin),lmo+rmc);
     in 
     (nin,lmo,rmc,ounm,cunm)
     end
     val (res,_,_,reounm,recnum) = allInfo(parens)
     in
     if(reonum=0 andalso recnum=0) then SOME (res)
     else NONE
  end
end
